@page "/categorias/delete"
@inject Music_CRUD.Data.AppDbContext DB
@using Music_CRUD.Modelos
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Tem certeza que deseja deletar?</h3>
<div>
    <h4>Dados:</h4>
    <hr />
    @if (categorias is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Nome</dt>
            <dd class="col-sm-10">@categorias.Nome</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Artista</dt>
            <dd class="col-sm-10">@categorias.Artista</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Genero</dt>
            <dd class="col-sm-10">@categorias.Genero</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Album</dt>
            <dd class="col-sm-10">@categorias.Album</dd>
        </dl>
        <EditForm method="post" Model="categorias" OnValidSubmit="DeleteCategorias" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(categorias is null)">Deletar</button> |
            <a href="/categorias">Volte para a lista</a>
        </EditForm>
    }
</div>

@code {
    Categorias? categorias;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        categorias = await DB.Categorias.FirstOrDefaultAsync(m => m.Id == Id);

        if (categorias is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCategorias()
    {
        DB.Categorias.Remove(categorias!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/categorias");
    }
}
